apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: "de.mannodermaus.android-junit5"
apply plugin: 'jacoco'
// apply plugin: 'kotlin-android-extensions' // deprecated, keep commented out
apply from: "$project.rootDir/tools/gradle/versionCode.gradle"

android {
    namespace "org.mozilla.focus"
    compileSdkVersion 33
    buildToolsVersion '30.0.3' // Valid for AGP 8.0+

    defaultConfig {
        applicationId "org.mozilla"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 11 // Overwritten dynamically for release/nightly builds
        versionName "8.11.3"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    buildFeatures {
        viewBinding true
        buildConfig true // Ensure BuildConfig class generation (required in AGP 8+)
    }

    lintOptions {
        lintConfig file("lint.xml")
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix ".debug"
        }
        nightly {
            initWith release
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    flavorDimensions "product", "abi"

    productFlavors {
        focus {
            dimension "product"
            applicationIdSuffix ".focus"
        }
        klar {
            dimension "product"
            applicationIdSuffix ".klar"
        }
        arm {
            dimension "abi"
            ndk {
                abiFilter "armeabi-v7a"
            }
        }
        aarch64 {
            dimension "abi"
            ndk {
                abiFilter "arm64-v8a"
            }
        }
        x86 {
            dimension "abi"
            ndk {
                abiFilter "x86"
            }
        }
    }

    sourceSets {
        test {
            resources.srcDir "${projectDir}/src/main/assets/"
        }
        // Release
        focusX86Release.root = 'src/focusRelease'
        focusArmRelease.root = 'src/focusRelease'
        focusAarch64Release.root = 'src/focusRelease'
        klarX86Release.root = 'src/klarRelease'
        klarArmRelease.root = 'src/klarRelease'
        klarAarch64Release.root = 'src/klarRelease'
        // Debug
        focusX86Debug.root = 'src/focusDebug'
        focusArmDebug.root = 'src/focusDebug'
        focusAarch64Debug.root = 'src/focusDebug'
        klarX86Debug.root = 'src/klarDebug'
        klarArmDebug.root = 'src/klarDebug'
        klarAarch64Debug.root = 'src/klarDebug'
        // Nightly
        focusX86Nightly.root = 'src/focusNightly'
        focusArmNightly.root = 'src/focusNightly'
        focusAarch64Nightly.root = 'src/focusNightly'
        klarX86Nightly.root = 'src/klarNightly'
        klarArmNightly.root = 'src/klarNightly'
        klarAarch64Nightly.root = 'src/klarNightly'
    }

    packagingOptions {
        pickFirst 'META-INF/atomicfu.kotlin_module'
        pickFirst 'META-INF/proguard/coroutines.pro'
    }
}

// Dynamically set versionCode accounting for ABI differences in release/nightly builds
android.applicationVariants.all { variant ->
    def buildType = variant.buildType.name
    if (buildType == "release" || buildType == "nightly") {
        def versionCode = generatedVersionCode
        if (variant.flavorName.contains("X86")) {
            versionCode += 2
        } else if (variant.flavorName.contains("Aarch64")) {
            versionCode += 1
        }
        variant.outputs.all { output ->
            setVersionCodeOverride(versionCode)
        }
    }
    println("----------------------------------------------")
    println("Build type:   $buildType")
    println("Flavor:       ${variant.flavorName}")
    println("Version code: ${variant.mergedFlavor.versionCode}")
}

// Blocklist generation task
def blockListOutputDir = 'src/main/res/raw'
task buildBlocklists(type: Copy) {
    from('../shavar-prod-lists') {
        include '*.json'
    }
    into blockListOutputDir
    rename 'disconnect-blacklist.json', 'blocklist.json'
    rename 'disconnect-entitylist.json', 'entitylist.json'
    rename { String filename ->
        filename.replaceAll("-", "_").toLowerCase()
    }
    outputs.dir blockListOutputDir // Declare outputs explicitly
}
clean.doLast {
    delete fileTree(blockListOutputDir) {
        include '**/*.json'
    }
}
// Ensure buildBlocklists runs before compile/generate config tasks
tasks.whenTaskAdded { task ->
    if (task.name.contains("generate") && task.name.contains("Config")) {
        task.dependsOn buildBlocklists
    }
}

// Declare dependencies on buildBlocklists for packaging, merging resource, and mapping source set path tasks to fix Gradle implicit dependency errors
android.applicationVariants.all { variant ->
    def packageResTaskName = "package${variant.name.capitalize()}Resources"
    def mergeResTaskName = "merge${variant.name.capitalize()}Resources"
    def mapSourceSetTaskName = "map${variant.name.capitalize()}SourceSetPaths"

    tasks.matching { it.name == packageResTaskName || it.name == mergeResTaskName || it.name == mapSourceSetTaskName }.configureEach {
        dependsOn tasks.named("buildBlocklists")
    }
}

// Adjust token injection for release focus builds
android.applicationVariants.all { variant ->
    def variantName = variant.getName()
    print("Adjust token: ")
    if (variantName.contains("Release") && variantName.contains("focus")) {
        try {
            def token = new File("${rootDir}/.adjust_token").text.trim()
            buildConfigField 'String', 'ADJUST_TOKEN', "\"$token\""
            println "(Added from .adjust_token file)"
        } catch (FileNotFoundException ignored) {
            buildConfigField 'String', 'ADJUST_TOKEN', 'null'
            println "X_X"
        }
    } else {
        buildConfigField 'String', 'ADJUST_TOKEN', 'null'
        println "--"
    }
}

// Sentry token injection for all builds
android.applicationVariants.all {
    print("Sentry token: ")
    try {
        def token = new File("${rootDir}/.sentry_token").text.trim()
        buildConfigField 'String', 'SENTRY_TOKEN', "\"$token\""
        println "(Added from .sentry_token file)"
    } catch (FileNotFoundException ignored) {
        buildConfigField 'String', 'SENTRY_TOKEN', '""'
        println "X_X"
    }
}

// Locale list generation for language support
def getEnabledLocales() {
    def resDir = file('src/main/res')
    def potentialLanguageDirs = resDir.listFiles(new FilenameFilter() {
        boolean accept(File dir, String name) {
            name.startsWith("values-")
        }
    })
    def langs = potentialLanguageDirs.findAll {
        file(new File(it, "strings.xml")).exists()
    }.collect {
        it.name.substring("values-".length())
    }.collect {
        if (it.length() > 3 && it.contains("-r")) {
            def regionPrefixPosition = it.indexOf("-r") + 1
            it.substring(0, regionPrefixPosition) + it.substring(regionPrefixPosition + 1)
        } else {
            it
        }
    }.collect {
        "\"$it\""
    }
    langs << "\"en-US\""
    langs.sort()
    return langs
}
def generatedLocaleListDir = 'src/main/java/org/mozilla/focus/generated'
def generatedLocaleListFilename = 'LocaleList.java'
task generateLocaleList {
    doLast {
        def dir = file(generatedLocaleListDir)
        dir.mkdirs()
        def localeList = file(new File(dir, generatedLocaleListFilename))
        if (localeList.exists()) localeList.delete()
        localeList.createNewFile()
        localeList << "package org.mozilla.focus.generated;\n\n"
        localeList << "import java.util.Arrays;\n"
        localeList << "import java.util.Collections;\n"
        localeList << "import java.util.List;\n\n"
        localeList << "public class LocaleList {\n"
        localeList << "    public static final List<String> BUNDLED_LOCALES = Collections.unmodifiableList(Arrays.asList(new String[] { "
        localeList << getEnabledLocales().join(", ") + " }));\n"
        localeList << "}\n"
    }
}
tasks.whenTaskAdded { task ->
    if (task.name.contains("compile")) {
        task.dependsOn generateLocaleList
    }
}
clean.doLast {
    file(generatedLocaleListDir).deleteDir()
}

// Jacoco test coverage config if enabled
if (project.hasProperty("coverage")) {
    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
    }
    android.applicationVariants.all { variant ->
        task "jacoco${variant.name.capitalize()}TestReport"(type: JacocoReport,
                dependsOn: ["test${variant.name.capitalize()}UnitTest"]) {
            reports {
                html.enabled true
                xml.enabled true
            }
            def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                              '**/*Test*.*', 'android/**/*.*', '**/*$[0-9].*']
            def kotlinTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/${variant.name}", excludes: fileFilter)
            def javaTree = fileTree(dir: "$project.buildDir/intermediates/classes/${variant.flavorName}/${variant.buildType.name}", excludes: fileFilter)
            def mainSrc = "$project.projectDir/src/main/java"
            sourceDirectories = files([mainSrc])
            classDirectories = files([kotlinTree, javaTree])
            executionData = fileTree(dir: project.buildDir, includes: [
                    "jacoco/test${variant.name.capitalize()}UnitTest.exec", "outputs/code-coverage/connected/*coverage.ec"
            ])
        }
    }
    android {
        buildTypes {
            debug {
                testCoverageEnabled true
                applicationIdSuffix ".coverage"
            }
        }
    }
}

// Dependencies block - ensure versions are correctly defined in root build.gradle ext properties
dependencies {
    implementation "androidx.appcompat:appcompat:$support_libraries_version"
    implementation "androidx.browser:browser:$support_libraries_version"
    implementation "androidx.core:core-ktx:1.1.0"
    implementation "com.google.android.material:material:$support_libraries_version"
    implementation "androidx.cardview:cardview:$support_libraries_version"
    implementation "androidx.recyclerview:recyclerview:$support_libraries_version"
    implementation "androidx.legacy:legacy-support-v4:$support_libraries_version"
    implementation "androidx.preference:preference:$support_libraries_version"
    implementation 'io.sentry:sentry-android:1.7.21'
    implementation "androidx.lifecycle:lifecycle-extensions:$architecture_components_version"
    compileOnly 'net.jcip:jcip-annotations:1.0'
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation "org.mozilla.components:browser-domains:$mozilla_components_version"
    implementation "org.mozilla.components:browser-errorpages:$mozilla_components_version"
    implementation "org.mozilla.components:browser-search:$mozilla_components_version"
    implementation "org.mozilla.components:browser-session:$mozilla_components_version"
    implementation "org.mozilla.components:browser-state:$mozilla_components_version"
    implementation "org.mozilla.components:concept-engine:$mozilla_components_version"
    implementation "org.mozilla.components:concept-fetch:$mozilla_components_version"
    implementation "org.mozilla.components:feature-customtabs:$mozilla_components_version"
    implementation "org.mozilla.components:lib-crash:$mozilla_components_version"
    implementation "org.mozilla.components:lib-fetch-httpurlconnection:$mozilla_components_version"
    implementation "org.mozilla.components:service-telemetry:$mozilla_components_version_telemetry"
    implementation "org.mozilla.components:service-fretboard:$mozilla_components_version", {
        exclude group: 'android.arch.work', module: 'work-runtime'
    }
    implementation "org.mozilla.components:support-ktx:$mozilla_components_version"
    implementation "org.mozilla.components:support-utils:$mozilla_components_version"
    implementation "org.mozilla.components:ui-autocomplete:$mozilla_components_version"
    implementation "org.mozilla.components:ui-colors:$mozilla_components_version"
    implementation 'com.squareup.okhttp3:okhttp:3.14.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    focusImplementation 'com.adjust.sdk:adjust-android:4.11.4'
    focusImplementation 'com.android.installreferrer:installreferrer:1.1'
    implementation "org.mozilla.components:browser-engine-gecko:$mozilla_components_version"
    implementation "org.mozilla.geckoview:geckoview:$gecko_release_version"
    implementation "androidx.palette:palette:$support_libraries_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.3.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.3.1"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.3.1"
    testImplementation "junit:junit:4.12"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.3.1"
    testImplementation "org.robolectric:robolectric:4.3"
    testImplementation 'org.mockito:mockito-core:2.24.5'
    testImplementation "androidx.arch.core:core-testing:$architecture_components_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-web:$espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:3.11.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.11.0'
    androidTestImplementation "tools.fastlane:screengrab:2.0.0", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.1.0-alpha4', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    testImplementation 'androidx.test:core:1.2.0'
    testImplementation 'androidx.test:runner:1.2.0'
    testImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    debugImplementation 'com.facebook.stetho:stetho:1.5.1'
}

// Kotlin compiler options
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions.allWarningsAsErrors = true
}
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions.jvmTarget = "17"
}

kotlin {
    jvmToolchain(17)
}

